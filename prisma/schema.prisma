// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  password         String
  image            String?
  name             String         @unique
  phone            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  role             Role           @default(USER)
  favouriteCart    FavouriteCart?
  receipt          Receipt[]
  status           Verification   @default(UNVERIFIED)
  subscription     Subscription   @default(UNSUBSCRIBED)
  movieReviews     MovieReviews[]
}

model Receipt {
  id            Int      @id @default(autoincrement())
  user          User?    @relation(fields: [userId], references: [id])
  userId        Int?
  orderId       String
  name          String?
  email         String?
  phone         String?
  transactionId String?
  status        Status?  @default(PENDING)
  amount        Float?
  created_at    DateTime @default(now())
}

model MovieReviews {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id])
  movie       Movies  @relation(fields: [movieId], references: [id])
  movieId     Int
  test        String?
  userRating  Int?
  userReview  String?
  ratingCount Int?

  @@unique([userId, movieId], name: "user_movie_unique")
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

enum Verification {
  VERIFIED
  UNVERIFIED
}

enum Subscription {
  SUBSCRIBED
  UNSUBSCRIBED
}

enum Role {
  ADMIN
  USER
  SUPERUSER
}

model Category {
  id         Int      @id @default(autoincrement())
  tittle     String   @unique
  display    String   @default("show")
  created_at DateTime @default(now())
  movies     Movies[]
}

model Movies {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  image               String
  video               String?
  time                String
  approxiT            String
  popular             Boolean
  category            Category              @relation(fields: [categoryId], references: [id])
  favouriteCartMovies FavouriteCartMovies[]
  categoryId          Int
  year                String
  approxiY            String
  rating              Int?
  watchCount          Int                   @default(0)
  approxiR            String
  language            String
  description         String
  price               Float

  trailer           String
  casts             CastsOnMovies[]
  created_at        DateTime        @default(now())
  product_update_at DateTime        @updatedAt
  movieReviews      MovieReviews[]
}

model Casts {
  id                Int             @id @default(autoincrement())
  name              String          @unique
  image             String
  role              String
  movies            CastsOnMovies[]
  created_at        DateTime        @default(now())
  product_update_at DateTime        @updatedAt
}

model CastsOnMovies {
  id      Int    @id @default(autoincrement())
  movieId Int
  castId  Int
  movie   Movies @relation(fields: [movieId], references: [id])
  cast    Casts  @relation(fields: [castId], references: [id])

  @@unique([movieId, castId])
}

model FavouriteCart {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  favouriteCartMovies FavouriteCartMovies[]
}

model FavouriteCartMovies {
  favouriteCart   FavouriteCart @relation(fields: [favouriteCartId], references: [id])
  favouriteCartId Int

  movie   Movies @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([favouriteCartId, movieId]) // Prevent duplicate entries
}
